#!/usr/bin/python3
"""Tests for base.py"""
import unittest
from models.base import Base
from models.rectangle import Rectangle

class test_rectangle(unittest.TestCase):
    def test_two_args(self):
        t1 = Rectangle(1, 2)
        t2 = Rectangle(2, 1)
        self.assertEqual(t1.id, t2.id - 1)

    def test_three_args(self):
        t1 = Rectangle(1, 2, 3)
        t2 = Rectangle(3, 2, 1)
        self.assertEqual(t1.id, t2.id - 1)

    def test_four_args(self):
        t1 = Rectangle(1, 2, 3, 4)
        t2 = Rectangle(4, 3, 2, 1)
        self.assertEqual(t1.id, t2.id - 1)

    def test_str_width(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle("1", 2)

    def test_str_height(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(1, "2")

    def test_str_x(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(1, 2, "3")

    def test_str_y(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(1, 2, 3, "4")

    def test_five_args(self):
        r = Rectangle(5, 7, 7, 5, 1)
        self.assertEqual(5, r.width)

    def test_negative_width(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(-1, 2)

    def test_negative_height(self):
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            Rectangle(1, -2)

    def test_zero_width(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(0, 2)

    def test_zero_height(self):
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            Rectangle(1, 0)

    def test_negative_x(self):
        with self.assertRaisesRegex(ValueError, "x must be >= 0"):
            Rectangle(1, 2, -3)

    def test_negative_y(self):
        with self.assertRaisesRegex(ValueError, "y must be >= 0"):
            Rectangle(1, 2, 3, -4)

    def test_area(self):
        r = Rectangle(10, 2, 0, 0, 0)
        self.assertEqual(20, r.area())

    def test_str(self):
        rect = Rectangle(1, 2)
        self.assertEqual(rect.__str__(), '[Rectangle] (6) 0/0 - 1/2')

    def test_to_dictionary_output(self):
        r = Rectangle(1, 2, 3, 4, 5)
        correct = {'x': 3, 'y': 4, 'id': 5, 'height': 2, 'width': 1}
        self.assertDictEqual(correct, r.to_dictionary())

    def test_update_args_zero(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update()
        self.assertEqual("[Rectangle] (10) 10/10 - 10/10", str(r))

    def test_update_args_one(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(89)
        self.assertEqual("[Rectangle] (89) 10/10 - 10/10", str(r))

    def test_update_args_two(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(89, 1)
        self.assertEqual("[Rectangle] (89) 10/10 - 1/10", str(r))

    def test_update_args_three(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(89, 1, 2)
        self.assertEqual("[Rectangle] (89) 10/10 - 1/2", str(r))

    def test_update_args_four(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(89, 1, 2, 3)
        self.assertEqual("[Rectangle] (89) 3/10 - 1/2", str(r))

    def test_update_args_five(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(89, 1, 2, 3, 4)
        self.assertEqual("[Rectangle] (89) 3/4 - 1/2", str(r))

    def test_update_kwargs_one(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(id=89)
        self.assertEqual("[Rectangle] (89) 10/10 - 10/10", str(r))

    def test_update_kwargs_two(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(width=1, id=89)
        self.assertEqual("[Rectangle] (89) 10/10 - 1/10", str(r))

    def test_update_kwargs_three(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(height=2, width=1, id=89)
        self.assertEqual("[Rectangle] (89) 10/10 - 1/2", str(r))

    def test_update_kwargs_four(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(x=3, height=2, width=1, id=89)
        self.assertEqual("[Rectangle] (89) 3/10 - 1/2", str(r))

    def test_update_kwargs_four(self):
        r = Rectangle(10, 10, 10, 10, 10)
        r.update(y=4, x=3, height=2, width=1, id=89)
        self.assertEqual("[Rectangle] (89) 3/4 - 1/2", str(r))

    def test_create_rectangle(self):
        r1 = Rectangle(1, 2, 3, 4, 5)
        r1_dictionary = r1.to_dictionary()
        r2 = Rectangle.create(**r1_dictionary)
        self.assertEqual("[Rectangle] (5) 3/4 - 1/2", str(r1))

    def test_save_to_file_None(self):
        with self.assertRaisesRegex(AttributeError, " must be >= 0"):
            Rectangle.save_to_file(None)

    def test_save_to_file_empty_list(self):
        Rectangle.save_to_file([])
        with open("Rectangle.json", "r") as f:
            self.assertEqual("[]", f.read())

    def test_save_to_file_more_than_one_arg(self):
        with self.assertRaises(TypeError):
            Rectangle.save_to_file([], 2)

    @classmethod
    def cleanup(self):
        """Delete any created files."""
        try:
            os.remove("Rectangle.json")
        except IOError:
            pass
        try:
            os.remove("Square.json")
        except IOError:
            pass

    def test_load_from_file_first_rectangle(self):
        r1 = Rectangle(10, 7, 2, 8, 1)
        r2 = Rectangle(2, 4, 5, 6, 2)
        Rectangle.save_to_file([r1, r2])
        list_rectangles_output = Rectangle.load_from_file()
        self.assertEqual(str(r1), str(list_rectangles_output[0]))

    def test_load_no_file(self):
        output = Rectangle.load_from_file()
        self.assertEqual([], output)

if __name__ == "__main__":
    unittest.main()
